# Golang CircleCI 2.0 configuration file
#
# Reference
#   * https://circleci.com/docs/2.0/language-go/
#   * https://github.com/CircleCI-Public/circleci-demo-go/blob/master/Makefile
#
version: 2.1

orbs:
  go: circleci/go@0.2.0 # https://circleci.com/orbs/registry/orb/circleci/go

defaults: &defaults
  working_directory: /go/src/github.com/johncoleman83/cerebrum

merge_master: &merge_master
  name: Fetch PR merge commit
  command: |
    if [[ -n "${CIRCLE_PULL_REQUEST}" ]]; then
      git fetch origin master
      git rebase origin/master
      if [[ $? -ne 0 ]]; then
        echo "aborting due to detected merge conflicts."
        exit 1
      fi
    fi

jobs:
  test:
    <<: *defaults
    parameters:
      tag:
        type: string
        default: '1.13'
    docker:
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: mysql:latest
        command: mysqld --sql_mode=""
        restart: always
        ports:
          - 3306:3306
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: cerebrum_mysql_test_db
          MYSQL_USER: mysql_test_user
          MYSQL_PASSWORD: mysql_test_password
    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    steps:
      - setup_remote_docker
      - checkout
      - run:
          <<: *merge_master
      - go/install
      - run:
          name: wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: install dependencies
          command: go get -t -v ./...
      - run:
          name: test go packages
          command: ./scripts/test.bash
      - store_artifacts:
          path: log
          destination: test.log
      - store_test_results:
          path: test

  lint:
    <<: *defaults
    steps:
      - setup_remote_docker
      - checkout
      - run:
          <<: *merge_master
      - go/install
      - run:
          name: install golint
          command: go get -u golang.org/x/lint/golint
      - run:
          name: run linter
          command: make lint
      - store_artifacts:
          path: log
          destination: test.log
      - store_test_results:
          path: test

  code_coverage:
    <<: *defaults
    steps:
      - checkout
      - run:
          <<: *merge_master
      # token required for private projects 'bash <(curl -s https://codecov.io/bash) -t token'
      - run:
          name: code coverage check with codecov.io
          command: bash <(curl -s https://codecov.io/bash) -y ./build/ci/codecov/codecov.yml || echo "Codecov did not collect coverage reports"
      - store_artifacts:
          path: log
          destination: test.log
      - store_test_results:
          path: test

  code_climate:
    <<: *defaults
    environment: 
      - CC_TEST_REPORTER_ID: 42fb106e769642e0c715fe3c6299b9bdb8963abe5321a03719b611335096b254
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json
    
workflows:
  version: 2
  build-and-test:
    jobs:
      - build_and_test:
          tag: '1.13'
      - lint:
          tag: '1.13'
      - code_coverage
      - code_climate
