# Golang CircleCI 2.0 configuration file
#
# Reference
#   * https://circleci.com/docs/2.0/language-go/
#   * https://github.com/CircleCI-Public/circleci-demo-go/blob/master/Makefile
#
version: 2

merge_master: &merge_master
  name: Fetch PR merge commit
  command: |
    if [[ -n "${CIRCLE_PULL_REQUEST}" ]]; then
      git fetch origin master
      git rebase origin/master
      if [[ $? -ne 0 ]]; then
        echo "aborting due to detected merge conflicts."
        exit 1
      fi
    fi

jobs:
  lint:
    docker:
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/johncoleman83/cerebrum
    steps:
      - setup_remote_docker
      - checkout
      - run:
          <<: *merge_master
      - run:
          name: install golint
          command: go get -u golang.org/x/lint/golint
      - run:
          name: run linter
          command: make lint

  test:
    docker:
      - image: circleci/golang:1.13
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: mysql:latest
        command: mysqld --sql_mode=""
        restart: always
        ports:
          - 3306:3306
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: cerebrum_mysql_test_db
          MYSQL_USER: mysql_test_user
          MYSQL_PASSWORD: mysql_test_password
    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/johncoleman83/cerebrum
    steps:
      - setup_remote_docker
      - checkout
      - run:
          <<: *merge_master
      - run:
          name: wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: install dependencies
          command: go get -t -v ./...
      - run:
          name: test go packages
          command: |
            ./scripts/test.bash
      # token required for private projects 'bash <(curl -s https://codecov.io/bash) -t token'
      - run:
          name: code coverage check with codecov.io
          command: bash <(curl -s https://codecov.io/bash) -y ./build/ci/codecov/.codecov.yml || echo "Codecov did not collect coverage reports"

workflows:
  version: 2
  build-and-test:
    jobs:
      - lint
      - test
