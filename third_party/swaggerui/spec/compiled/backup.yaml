consumes:
  - application/json
definitions:
  AccessRole:
    description: AccessRole represents access role type
    format: uint64
    type: integer
    x-go-package: github.com/johncoleman83/cerebrum/pkg/utl/models
  HTTP:
    description: HTTP represents password http transport service
    type: object
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/password/transport
  Role:
    description: Role model
    properties:
      access_level:
        $ref: '#/definitions/AccessRole'
      id:
        $ref: '#/definitions/AccessRole'
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/johncoleman83/cerebrum/pkg/utl/models
  User:
    description: User represents user domain model
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
      active:
        type: boolean
        x-go-name: Active
      address:
        type: string
        x-go-name: Address
      account_id:
        format: uint64
        type: integer
        x-go-name: AccountID
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      last_login:
        format: date-time
        type: string
        x-go-name: LastLogin
      last_name:
        type: string
        x-go-name: LastName
      last_password_change:
        format: date-time
        type: string
        x-go-name: LastPasswordChange
      primary_team_id:
        format: uint64
        type: integer
        x-go-name: PrimaryTeamID
      mobile:
        type: string
        x-go-name: Mobile
      phone:
        type: string
        x-go-name: Phone
      role:
        $ref: '#/definitions/Role'
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/johncoleman83/cerebrum/pkg/utl/models
  credentials:
    properties:
      password:
        type: string
        x-go-name: Password
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/auth/transport
  listResponse:
    properties:
      page:
        format: int64
        type: integer
        x-go-name: Page
      users:
        items:
          $ref: '#/definitions/User'
        type: array
        x-go-name: Users
    type: object
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/user/transport
  pwChange:
    description: Password change request
    properties:
      new_password:
        type: string
        x-go-name: NewPassword
      new_password_confirm:
        type: string
        x-go-name: NewPasswordConfirm
      old_password:
        type: string
        x-go-name: OldPassword
    type: object
    x-go-name: changeReq
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/password/transport
  userCreate:
    description: User create request
    properties:
      account_id:
        format: uint64
        type: integer
        x-go-name: AccountID
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      last_name:
        type: string
        x-go-name: LastName
      primary_team_id:
        format: uint64
        type: integer
        x-go-name: PrimaryTeamID
      password:
        type: string
        x-go-name: Password
      password_confirm:
        type: string
        x-go-name: PasswordConfirm
      role_id:
        $ref: '#/definitions/AccessRole'
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-name: createReq
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/user/transport
  userUpdate:
    description: User update request
    properties:
      address:
        type: string
        x-go-name: Address
      first_name:
        type: string
        x-go-name: FirstName
      last_name:
        type: string
        x-go-name: LastName
      mobile:
        type: string
        x-go-name: Mobile
      phone:
        type: string
        x-go-name: Phone
    type: object
    x-go-name: updateReq
    x-go-package: github.com/johncoleman83/cerebrum/pkg/api/user/transport
host: localhost:8080
info:
  contact:
    email: me@davidjohncoleman.com
    name: David John Coleman II
    url: https://davidjohncoleman.com
  description: API Docs for CEREBRUM v1
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: CEREBRUM - go playground
  version: 1.0.0
paths:
  /login:
    post:
      operationId: login
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/credentials'
      responses:
        '200':
          $ref: '#/responses/loginResp'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/errMsg'
        '403':
          $ref: '#/responses/err'
        '404':
          $ref: '#/responses/errMsg'
        '500':
          $ref: '#/responses/err'
      summary: Logs in user by username and password.
      tags:
      - auth
  /me:
    get:
      operationId: meReq
      responses:
        '200':
          $ref: '#/responses/userResp'
        '500':
          $ref: '#/responses/err'
      summary: Gets user's info from session.
      tags:
      - auth
  /refresh/{token}:
    get:
      description: Refreshes jwt token by checking at database whether refresh token
        exists.
      operationId: refresh
      parameters:
      - description: refresh token
        in: path
        name: token
        required: true
        type: string
      responses:
        '200':
          $ref: '#/responses/refreshResp'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Refreshes jwt token.
      tags:
      - auth
  /v1/password/{id}:
    patch:
      description: If user's old passowrd is correct, it will be replaced with new
        password.
      operationId: pwChange
      parameters:
      - description: id of user
        in: path
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pwChange'
      responses:
        '200':
          $ref: '#/responses/ok'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Changes user's password.
      tags:
      - password
  /v1/users:
    get:
      description: Returns list of users. Depending on the user role requesting it,
        it may return all users for SuperAdmin/Admin users, all account/team users
        for Account/Team admins, and an error for non-admin users.
      operationId: listUsers
      parameters:
      - description: number of results
        in: query
        name: limit
        type: integer
      - description: page number
        in: query
        name: page
        type: integer
      responses:
        '200':
          $ref: '#/responses/userListResp'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Returns list of users.
      tags:
      - users
    post:
      operationId: userCreate
      responses:
        '200':
          $ref: '#/responses/userResp'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/errMsg'
        '500':
          $ref: '#/responses/err'
      summary: Creates new user account.
      tags:
      - users
  /v1/users/{id}:
    delete:
      description: Deletes a user with requested ID.
      operationId: userDelete
      parameters:
      - description: id of user
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          $ref: '#/responses/ok'
        '400':
          $ref: '#/responses/err'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Deletes a user
      tags:
      - users
    get:
      description: Returns a single user by its ID.
      operationId: getUser
      parameters:
      - description: id of user
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          $ref: '#/responses/userResp'
        '400':
          $ref: '#/responses/err'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/err'
        '404':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Returns a single user.
      tags:
      - users
    patch:
      description: Updates user's contact information -> first name, last name, mobile,
        phone, address.
      operationId: userUpdate
      parameters:
      - description: id of user
        in: path
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userUpdate'
      responses:
        '200':
          $ref: '#/responses/userResp'
        '400':
          $ref: '#/responses/errMsg'
        '401':
          $ref: '#/responses/err'
        '403':
          $ref: '#/responses/err'
        '500':
          $ref: '#/responses/err'
      summary: Updates user's contact information
      tags:
      - users
produces:
  - application/json
responses:
  err:
    description: Error response
  errMsg:
    description: Error response with message
    headers:
      message:
        type: string
  loginResp:
    description: Login response
    schema:
      properties:
        expires:
          type: string
          x-go-name: Expires
        refresh_token:
          type: string
          x-go-name: RefreshToken
        token:
          type: string
          x-go-name: Token
      type: object
  ok:
    description: Success response
  refreshResp:
    description: Token refresh response
    schema:
      properties:
        expires:
          type: string
          x-go-name: Expires
        token:
          type: string
          x-go-name: Token
      type: object
  userListResp:
    description: Users model response
    schema:
      properties:
        page:
          format: int64
          type: integer
          x-go-name: Page
        users:
          items:
            $ref: '#/definitions/User'
          type: array
          x-go-name: Users
      type: object
  userResp:
    description: User model response
    schema:
      properties:
        CreatedAt:
          format: date-time
          type: string
        DeletedAt:
          format: date-time
          type: string
        ID:
          format: uint64
          type: integer
        UpdatedAt:
          format: date-time
          type: string
        active:
          type: boolean
          x-go-name: Active
        address:
          type: string
          x-go-name: Address
        account_id:
          format: uint64
          type: integer
          x-go-name: AccountID
        email:
          type: string
          x-go-name: Email
        first_name:
          type: string
          x-go-name: FirstName
        last_login:
          format: date-time
          type: string
          x-go-name: LastLogin
        last_name:
          type: string
          x-go-name: LastName
        last_password_change:
          format: date-time
          type: string
          x-go-name: LastPasswordChange
        primary_team_id:
          format: uint64
          type: integer
          x-go-name: PrimaryTeamID
        mobile:
          type: string
          x-go-name: Mobile
        phone:
          type: string
          x-go-name: Phone
        role:
          $ref: '#/definitions/Role'
        username:
          type: string
          x-go-name: Username
      type: object
schemes:
  - http
security:
  - ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
